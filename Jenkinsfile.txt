pipeline {
    agent any
    stages {
		
		
		// *****ALL CODE TO BE ADDED BELOW THIS COMMENT*****
		
		
		//Code starts for stage Clean
        stage('Clean') {
            steps {
                sh 'mvn clean'
            }
        }
		//Code ends for stage Clean
		
		
		/*
		//Code starts for stage PMD
		stage('PMD') {
            steps {
                sh 'mvn site'
            }
        }
		//Code ends for stage PMD
		
		
		
		//Code starts for stage Compile
		stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }
		//Code Ends for stage Compile
		
		
		
		//Code starts for stage Static Code Analysis
		stage('Static Code Analysis') {
            steps {
			 script {
          scannerHome = tool 'sonar-scanner'
        }
				withSonarQubeEnv('My SonarQube Server')
				{
				sh "${scannerHome}/bin/sonar-scanner"
				}
			}
		}
		//Code ends for stage Static Code Analysis
		
		
		
		//Code starts for stage Unit Test
        stage('Unit Test') {
            steps {
                sh 'mvn test'
            }	
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
		//Code ends for stage Unit Test
		
		
		
		//Code starts for stage JaCoCo
		stage('JaCoCo') {
            steps {
                sh 'mvn jacoco:report'
            }
        }
		//Code ends for stage JaCoCo
		*/
		
		
		//Code starts for stage Build
		stage('Build') {
            steps {
                sh 'mvn install -DskipTests'
            }
        }
		//Code ends for stage Build
		
		
		stage('Artifactory') {
            steps {
                step([
				rtServer (
    id: "My ART",
    url: "http://192.168.100.65:8081/artifactory",
    username: "user",
    password: "password"
)
				//def server = Artifactory.server 'My ART'
				server.publishBuildInfo buildInfo
				])
			}
        }
		
		
		/*
		 stage('Artifactory download and upload'){
            steps {
                script{
                    // Obtain an Artifactory server instance, defined in Jenkins --> Manage:
                    def server = Artifactory.server 'My ART'

                    // Read the download and upload specs:
                    def downloadSpec = readFile 'jenkins-examples/pipeline-examples/resources/props-download.json'
                    def uploadSpec = readFile 'jenkins-examples/pipeline-examples/resources/props-upload.json'

                    // Download files from Artifactory:
                    def buildInfo1 = server.download spec: downloadSpec
                    // Upload files to Artifactory:
                    def buildInfo2 = server.upload spec: uploadSpec

                    // Merge the local download and upload build-info instances:
                    buildInfo1.append buildInfo2

                    // Publish the merged build-info to Artifactory
                    server.publishBuildInfo buildInfo1
                }
            }
        }
		
		*/
		
		
		
		//Code starts for stage Tomcat Server Up
		stage('Tomcat Server Up') {
            steps {
                sh '/tmp/apache-tomcat-9.0.20/bin/startup.sh'
            }
        }
		//Code ends for stage Tomcat Server Up
		
		
		
		//Code starts for stage War Deployed on Tomcat Server
		stage('War Deployed on Tomcat Server') {
            steps {
                sh 'cp /var/jenkins_home/workspace/verity-devops/target/ExpenseApp-1.war /tmp/apache-tomcat-9.0.20/webapps'
            }
        }
		//Code ends for stage War Deployed on Tomcat Server
		
		
		
		//Code starts for stage System Test
		stage('System Test') {
            steps {
				//Change git url below as per your forked github repository URL
				git url: 'https://github.com/umangsaltuniv/EMSystemTests.git'
            	sh 'mvn -Dtest=ExpenseManagerSystemTest test'
            }
        }
		//Code ends for stage System Test
		
		// *****ALL CODE TO BE ADDED ABOVE THIS COMMENT*****
    }
}